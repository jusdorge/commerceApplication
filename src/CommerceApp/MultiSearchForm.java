package CommerceApp;
import Adapters.FrameAdapter;
import Adapters.JDBCAdapter;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import javax.swing.JComboBox;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import util.Operation;
import util.Utilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DELL
 */
public class MultiSearchForm extends javax.swing.JDialog {

    private int SQLRows = 0;
    private int prefferedColumn = 0;

    
    /**
     * Creates new form MultiSearchForm
     */
    public MultiSearchForm() {
        initComponents();
        setIconImage(Utilities.setIconImage(this));
        FrameAdapter.centerFrame(this);
        this.setModalityType(DEFAULT_MODALITY_TYPE);
    }
    
    public MultiSearchForm(Operation op){
        switch(op){
            case SELL:
            break;
            case BUY:
            break;
            case SELLBACK:
            break;
            case BUYBACK:
            break;
            case CUSTOMER:
                
            break;
            case PROVIDER:
            break;
            default:
            break;
                
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tableComboBox = new javax.swing.JComboBox<>();
        fieldComboBox = new javax.swing.JComboBox<>();
        clauseComboBox = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        searchTextField = new javax.swing.JTextField();
        RowCountLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 51, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("RECHERCHE MULTIPLE");
        jLabel1.setOpaque(true);

        jLabel2.setText("Tables");

        jLabel3.setText("Champs");

        jLabel4.setText("Critère");

        tableComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        tableComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableComboBoxActionPerformed(evt);
            }
        });

        fieldComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fieldComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldComboBoxActionPerformed(evt);
            }
        });

        clauseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun", "Egale à", "Contient", "Commence par", "Se termine par" }));

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 490));

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        resultTable.setFillsViewportHeight(true);
        resultTable.setPreferredSize(new java.awt.Dimension(500, 490));
        jScrollPane1.setViewportView(resultTable);

        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyTyped(evt);
            }
        });

        RowCountLabel.setBackground(new java.awt.Color(255, 255, 255));
        RowCountLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        RowCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        RowCountLabel.setText("Nombre de ligne : 0");
        RowCountLabel.setToolTipText("");
        RowCountLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        RowCountLabel.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(42, 42, 42)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(clauseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchButton)))
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(383, 383, 383)
                .addComponent(RowCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(searchButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clauseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RowCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        String SQL="SHOW TABLES;";
        fillComboBox(tableComboBox,makeSQL(SQL));
        String selectedItem = (String)tableComboBox.getSelectedItem();
        SQL = "DESCRIBE " + selectedItem;
        fillComboBox(fieldComboBox, makeSQL(SQL));
        searchTextField.requestFocusInWindow();
        initLocalVariable();
        resultTable.setModel(makeSQL(getSQL()));
        
        RowCountLabel.setText("Nombre de ligne : " + Integer.toString(getSQLRows()));
    }//GEN-LAST:event_formWindowOpened

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            searchProcess();
        }
    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchProcess();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void tableComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableComboBoxActionPerformed
        if (!(getSQLTableName()== null)){
            initLocalVariable();
            String fieldsSQL = "DESCRIBE " + getSQLTableName();
            fillComboBox(fieldComboBox,makeSQL(fieldsSQL));
        }
        
    }//GEN-LAST:event_tableComboBoxActionPerformed

    private void fieldComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldComboBoxActionPerformed
        // a change is done in the fields.
        // so change the width of the corespandante
        // column in the table
        if (evt.getSource().equals(fieldComboBox)){
            JComboBox cb = (JComboBox) evt.getSource();
            String field = (String)cb.getSelectedItem();
            prefferedColumn = getColumnIndex(field);
        }
    }//GEN-LAST:event_fieldComboBoxActionPerformed

    private void searchTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyTyped
        char keyChar = evt.getKeyChar();
        if (Character.isLowerCase(keyChar)) {
            evt.setKeyChar(Character.toUpperCase(keyChar));
        }
    }//GEN-LAST:event_searchTextFieldKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel RowCountLabel;
    private javax.swing.JComboBox<String> clauseComboBox;
    private javax.swing.JComboBox<String> fieldComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JComboBox<String> tableComboBox;
    // End of variables declaration//GEN-END:variables
    private JDBCAdapter jdbc;
    private String SQLTableName;
    private String SQLFieldName;
    private String SQLClauseString;
    private String SQLClause;
    
    private void connect() {
        jdbc = new JDBCAdapter(Utilities.URL, Utilities.DRIVER_NAME
                                ,Utilities.USER, Utilities.PASSWORD);
    }

    private TableModel makeSQL(String SQL) {
        connect();
        jdbc.executeQuery(SQL);
        try{
           jdbc.close();
        }catch (SQLException e){
            
        }
        SQLRows = jdbc.getRowCount();
        return jdbc;
    }

    private void fillComboBox(JComboBox<String> aComboBox, TableModel makeSQL) {
        
        System.out.println(aComboBox.getName());
        aComboBox.removeAllItems();
        for (int i = 0; i < makeSQL.getRowCount(); i++ ){
            aComboBox.addItem((String)makeSQL.getValueAt(i, 0));
        }
    }
/**
 * execute search process from the creteria choosen in the fields
 */
    private void searchProcess() {
        initLocalVariable();
        RowCountLabel.setText("Nombre de ligne : " + getSQLRows());
        resultTable.setModel(makeSQL(getSQL()));
        setTableColumnWidth(prefferedColumn);
        resultTable.repaint();
        
    }

    private String getSQL() {
        String SQL = "SELECT * FROM ";
        if (SQLClause.equals("")){
            SQL += SQLTableName;
        }else{
            SQL += SQLTableName + " " + SQLClause;
        }
        return SQL;
    }

    private String getSQLTableName() {
        return (String)tableComboBox.getSelectedItem();
    }

    private void initLocalVariable() {
        SQLTableName = getSQLTableName();
        SQLFieldName = getSQLFieldName();
        SQLClauseString = getSQLClauseString();
        SQLClause = getClause();
    }

    private String getClause() {
        String SQLClauseType ="WHERE ";
        String type = (String)clauseComboBox.getSelectedItem();
        switch(type){
            case "Egale à":
                SQLClauseType += SQLFieldName
                                + "='" + SQLClauseString +"'";
                break;
            case "Contient":
                SQLClauseType += SQLFieldName
                                + " Like '%" + SQLClauseString 
                                + "%'";
                break;
            case "Commence par":
                SQLClauseType += SQLFieldName 
                                + " Like '" + SQLClauseString
                                + "%'";
                break;
            case "Se termine par":
                SQLClauseType += SQLFieldName
                                + " Like'%" + SQLClauseString;
                break;
            default:
                SQLClauseType ="";
                break;
        }
        return SQLClauseType;
    }

    private String getSQLClauseString() {
        return searchTextField.getText();
    }

    private String getSQLFieldName(){
        return (String)fieldComboBox.getSelectedItem();
    }

    private int getSQLRows() {
       return SQLRows;
    }

    private int getColumnIndex(String f) {
        int result = 0;
        for (int i = 0; i < fieldComboBox.getItemCount(); i++){
            String fieldName = (String)fieldComboBox.getItemAt(i);
            if (fieldName.equals(f)){
                result = i;
                break;
            }
        }
        return result;
    }

    private void setTableColumnWidth(int c) {
        TableColumn column = null;
        column = resultTable.getColumnModel().getColumn(c);
        column.setPreferredWidth(350);
    }
}
